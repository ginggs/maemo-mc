This patch, originally written by X-Stranger (Jabber: xstranger@jabber.org.by)
will add eight differently colored file groups. The membership of a file to
certain group is determined by matching file name against a regular expression.
These eight regular expressions are editable through a new dialog.

Andrew Zabolotny <zap@homelink.ru>
diff -ur mc-4.6.2-pre1.orig/doc/mc.1.in mc-4.6.2-pre1/doc/mc.1.in
--- mc-4.6.2-pre1.orig/doc/mc.1.in	2008-07-22 23:02:03.000000000 +0400
+++ mc-4.6.2-pre1/doc/mc.1.in	2008-07-22 23:00:53.000000000 +0400
@@ -3033,7 +3033,9 @@
 dhotnormal, dhotfocus.  Help colors are: helpnormal, helpitalic,
 helpbold, helplink, helpslink.  Viewer color is: viewunderline.  Special
 highlighting colors are: executable, directory, link, stalelink, device,
-special, core.  Editor colors are: editnormal, editbold, editmarked.
+special, core. Filetype highlighting colors are: hidden, temp, doc,
+archive, source, media, graph, database.  Editor colors are: editnormal,
+editbold, editmarked.
 .PP
 .I input
 determines the color of input lines used in query dialogs.
@@ -3091,6 +3093,25 @@
 .I core
 is for core files.
 .PP
+Also filetype highlight colors determine how files displayed depending
+on file type such as (below are colors named as filetypes):
+.I hidden
+is used for hidden files and directories that begin with dot;
+.I temp
+is used for temporary files;
+.I doc
+is used for document and text files;
+.I archive
+is used for archive files;
+.I source
+is used for files with source codes;
+.I media
+is used for multimedia files;
+.I graph
+is used for files with graphic data;
+.I database
+is used for database files.
+.PP
 The possible colors are: black, gray, red, brightred, green,
 brightgreen, brown, yellow, blue, brightblue, magenta, brightmagenta,
 cyan, brightcyan, lightgray and white. And there is a special keyword
diff -ur mc-4.6.2-pre1.orig/doc/ru/mc.1.in mc-4.6.2-pre1/doc/ru/mc.1.in
--- mc-4.6.2-pre1.orig/doc/ru/mc.1.in	2008-07-22 23:02:03.000000000 +0400
+++ mc-4.6.2-pre1/doc/ru/mc.1.in	2008-07-22 23:00:53.000000000 +0400
@@ -3351,8 +3351,9 @@
 dnormal, dfocus, dhotnormal, dhotfocus; Цвета в окне подсказки:
 helpnormal, helpitalic, helpbold, helplink, helpslink; в окне программы
 просмотра:  viewunderline; специальные подсветки: executable, directory,
-link, device, special, core; в окне редактора: editnormal, editbold,
-editmarked.
+link, device, special, core; подсветка файлов по типам: hidden, temp,
+doc, archive, source, media, graph, database; в окне редактора:
+editnormal, editbold, editmarked.
 .PP
 Цвета задавать не обязательно. Цвет какого именно поля определяется
 каждым ключевым словом, можно понять из перевода этого ключевого слова.
@@ -3416,6 +3417,25 @@
 .I core
 \- для файлов с дампами (core).
 .PP
+Аналогично подсветка файлов по типам используется для подсветки файлов
+в зависимости от их расширения:
+.I hidden
+используется для скрытых файлов и каталогов, которые начинаются с точки;
+.I temp
+\- для временных файлов;
+.I doc
+\- для файлов документов;
+.I archive
+\- для файлов архивов;
+.I source
+\- для файлов исходных текстов;
+.I media
+\- для мультимедиа-файлов;
+.I graph
+\- для графических файлов;
+.I database
+\- для файлов баз данных.
+.PP
 Возможные цвета: black, gray, red, brightred, green, brightgreen, brown,
 yellow, blue, brightblue, magenta, brightmagenta, cyan, brightcyan,
 lightgray и white.
diff -ur mc-4.6.2-pre1.orig/src/boxes.c mc-4.6.2-pre1/src/boxes.c
--- mc-4.6.2-pre1.orig/src/boxes.c	2008-07-22 23:02:03.000000000 +0400
+++ mc-4.6.2-pre1/src/boxes.c	2008-07-23 01:05:10.000000000 +0400
@@ -643,6 +643,57 @@
 
 #endif /* HAVE_CHARSET */
 
+/*
+* File highlighting setup dialog
+*/
+#define FILEHLY 22
+#define FILEHLX 56
+
+static char *ret_ftype [NUM_FILE_TYPES];
+
+static QuickWidget filehl_widgets [] = {
+{ quick_button,   30, FILEHLX, FILEHLY - 3, FILEHLY, N_("&Cancel"), 0, B_CANCEL, 0, 0, "button-cancel" },
+{ quick_button,   12, FILEHLX, FILEHLY - 3, FILEHLY, N_("&Ok"), 0, B_ENTER, 0, 0, "button-ok" },
+{ quick_input,     4, FILEHLX, 17,  FILEHLY, "", 48, 0, 0, &ret_ftype [7], "input-ft-dbase"},
+{ quick_label,     4, FILEHLX, 16,  FILEHLY, N_("Databases"), 0, 0, 0, 0, "label-ft-dbase" },
+{ quick_input,     4, FILEHLX, 15,  FILEHLY, "", 48, 0, 0, &ret_ftype [6], "input-ft-graph"},
+{ quick_label,     4, FILEHLX, 14,  FILEHLY, N_("Graphics"), 0, 0, 0, 0, "label-ft-graph" },
+{ quick_input,     4, FILEHLX, 13,  FILEHLY, "", 48, 0, 0, &ret_ftype [5], "input-ft-media" },
+{ quick_label,     4, FILEHLX, 12,  FILEHLY, N_("Multimedia"), 0, 0, 0, 0, "label-ft-media" },
+{ quick_input,     4, FILEHLX, 11,  FILEHLY, "", 48, 0, 0, &ret_ftype [4], "input-ft-src" },
+{ quick_label,     4, FILEHLX, 10,  FILEHLY, N_("Sources"),  0, 0, 0, 0, "label-ft-src" },
+{ quick_input,     4, FILEHLX,  9,  FILEHLY, "", 48, 0, 0, &ret_ftype [3], "input-ft-arch" },
+{ quick_label,     4, FILEHLX,  8,  FILEHLY, N_("Archives"),  0, 0, 0, 0, "label-ft-arch" },
+{ quick_input,     4, FILEHLX,  7,  FILEHLY, "", 48, 0, 0, &ret_ftype [2], "input-ft-doc" },
+{ quick_label,     4, FILEHLX,  6,  FILEHLY, N_("Text/Doc Files"),  0, 0, 0, 0, "label-ft-doc" },
+{ quick_input,     4, FILEHLX,  5,  FILEHLY, "", 48, 0, 0, &ret_ftype [1], "input-ft-tmp" },
+{ quick_label,     4, FILEHLX,  4,  FILEHLY, N_("Temp Files"),  0, 0, 0, 0, "label-ft-tmp" },
+{ quick_input,     4, FILEHLX,  3,  FILEHLY, "", 48, 0, 0, &ret_ftype [0], "input-ft-core" },
+{ quick_label,     4, FILEHLX,  2,  FILEHLY, N_("Core Files"),  0, 0, 0, 0, "label-ft-core" },
+{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } 
+};
+
+static QuickDialog filehl_dlg =
+{ FILEHLX, FILEHLY, -1, -1, N_(" File highlighting "), "[File highlighting]",  filehl_widgets, 0 };
+
+void
+file_highlighting_box (void)
+{
+    int i;
+
+    for (i = 0; i < NUM_FILE_TYPES; i++)
+        filehl_widgets [NUM_FILE_TYPES * 2 - i * 2].text = file_types [i].regex;
+
+    if (quick_dialog (&filehl_dlg) != B_CANCEL) {
+        for (i = 0; i < NUM_FILE_TYPES; i++) {
+            g_free (file_types [i].regex);
+            file_types [i].regex = ret_ftype [i];
+            if (file_types [i].regex_compiled > 0)
+                regfree (&file_types [i].regex_buf);
+            file_types [i].regex_compiled = 0;
+        }
+    }
+}
 
 #define TREE_Y 20
 #define TREE_X 60
diff -ur mc-4.6.2-pre1.orig/src/boxes.h mc-4.6.2-pre1/src/boxes.h
--- mc-4.6.2-pre1.orig/src/boxes.h	2008-07-22 23:02:03.000000000 +0400
+++ mc-4.6.2-pre1/src/boxes.h	2008-07-22 23:00:53.000000000 +0400
@@ -10,6 +10,7 @@
 			  int *case_sensitive);
 void    confirm_box      (void);
 void    display_bits_box (void);
+void    file_highlighting_box (void);
 void    configure_vfs    (void);
 void    jobs_cmd         (void);
 char   *cd_dialog        (void);
diff -ur mc-4.6.2-pre1.orig/src/color.c mc-4.6.2-pre1/src/color.c
--- mc-4.6.2-pre1.orig/src/color.c	2008-07-22 23:02:03.000000000 +0400
+++ mc-4.6.2-pre1/src/color.c	2008-07-23 01:36:17.000000000 +0400
@@ -88,21 +88,31 @@
     { "stalelink=",  0, 0 },  /* stale symbolic link */
     { "device=",     0, 0 },
     { "special=",    0, 0 }, /* sockets, fifo */
-    { "core=",       0, 0 }, /* core files */              /* 29 */
 
-    { 0,             0, 0 }, /* not usable (DEFAULT_COLOR_INDEX) *//* 30 */
+    /* colors for file types by shell expressions */
+    { "hidden=",     0, 0 }, /* hidden files */		/*29*/
+    { "core=",       0, 0 }, /* core files */		/*30*/
+    { "temp=",       0, 0 }, /* temp file type */	/*31*/
+    { "doc=",        0, 0 }, /* doc file type */	/*32*/
+    { "archive=",    0, 0 }, /* archive file type */	/*33*/
+    { "source=",     0, 0 }, /* sources file type */	/*34*/
+    { "media=",      0, 0 }, /* multimedia file type */	/*35*/
+    { "graph=",      0, 0 }, /* graphics file type */	/*36*/
+    { "database=",   0, 0 }, /* database file type */	/*37*/
+
+    { 0,             0, 0 }, /* not usable (DEFAULT_COLOR_INDEX) *//* 38 */
     { 0,             0, 0 }, /* unused */
     { 0,             0, 0 }, /* not usable (A_REVERSE) */
     { 0,             0, 0 }, /* not usable (A_REVERSE_BOLD) */
 
-/* editor colors start at 34 */
-    { "editnormal=",     0, 0 },	/* normal */       /* 34 */
+/* editor colors start at 42 */
+    { "editnormal=",     0, 0 },	/* normal */       /* 42 */
     { "editbold=",       0, 0 },	/* search->found */
     { "editmarked=",     0, 0 },	/* marked/selected */
     { "editwhitespace=", 0, 0 },	/* whitespace */
 
-/* error dialog colors start at 38 */
-    { "errdhotnormal=",  0, 0 }, /* Error dialog normal/hot */ /* 38 */
+/* error dialog colors start at 46 */
+    { "errdhotnormal=",  0, 0 }, /* Error dialog normal/hot */ /* 46 */
     { "errdhotfocus=",   0, 0 }, /* Error dialog focused/hot */
 };
 
@@ -160,8 +170,16 @@
 "link=lightgray,blue:"
 "stalelink=brightred,blue:"
 "device=brightmagenta,blue:"
-"core=red,blue:"
 "special=black,blue:"
+"hidden=black,blue:"
+"core=red,blue:"
+"temp=gray,blue:"
+"doc=brown,blue:"
+"archive=brightmagenta,blue:"
+"source=cyan,blue:"
+"media=green,blue:"
+"graph=brightcyan,blue:"
+"database=brightred,blue:"
 "editnormal=lightgray,blue:"
 "editbold=yellow,blue:"
 "editmarked=black,cyan:"
@@ -266,7 +284,7 @@
 }
 
 #ifndef HAVE_SLANG
-#define MAX_PAIRS 64
+#define MAX_PAIRS 84
 int attr_pairs [MAX_PAIRS];
 #endif
 
diff -ur mc-4.6.2-pre1.orig/src/color.h mc-4.6.2-pre1/src/color.h
--- mc-4.6.2-pre1.orig/src/color.h	2008-07-22 23:02:03.000000000 +0400
+++ mc-4.6.2-pre1/src/color.h	2008-07-23 01:36:07.000000000 +0400
@@ -63,11 +63,21 @@
 #define STALE_LINK_COLOR   IF_COLOR (26, 0)
 #define DEVICE_COLOR       IF_COLOR (27, 0)
 #define SPECIAL_COLOR      IF_COLOR (28, 0)
-#define CORE_COLOR         IF_COLOR (29, 0)
+#define HIDDEN_COLOR       IF_COLOR (29, 0)
 
+/* colors for specific files */
+#define FILE_TYPE_COLOR_1st CORE_COLOR
+#define CORE_COLOR         IF_COLOR (30, 0)
+#define TEMP_COLOR         IF_COLOR (31, 0)
+#define DOC_COLOR          IF_COLOR (32, 0)
+#define ARCH_COLOR         IF_COLOR (33, 0)
+#define SRC_COLOR          IF_COLOR (34, 0)
+#define MEDIA_COLOR        IF_COLOR (35, 0)
+#define GRAPH_COLOR        IF_COLOR (36, 0)
+#define DBASE_COLOR        IF_COLOR (37, 0)
 
 /* For the default color any unused index may be chosen. */
-#define DEFAULT_COLOR_INDEX   30
+#define DEFAULT_COLOR_INDEX   38
 #define DEFAULT_COLOR      IF_COLOR (DEFAULT_COLOR_INDEX, 0)
 
 /*
@@ -75,15 +85,15 @@
  * respectively
  * Last is defined to view color.
  */
-#define EDITOR_NORMAL_COLOR_INDEX    34
+#define EDITOR_NORMAL_COLOR_INDEX    42
 #define EDITOR_NORMAL_COLOR          IF_COLOR (EDITOR_NORMAL_COLOR_INDEX, 0)
-#define EDITOR_BOLD_COLOR            IF_COLOR (35, A_BOLD)
-#define EDITOR_MARKED_COLOR          IF_COLOR (36, A_REVERSE)
-#define EDITOR_WHITESPACE_COLOR      IF_COLOR (37, 0 /* irrelevant */)
+#define EDITOR_BOLD_COLOR            IF_COLOR (43, A_BOLD)
+#define EDITOR_MARKED_COLOR          IF_COLOR (44, A_REVERSE)
+#define EDITOR_WHITESPACE_COLOR      IF_COLOR (45, 0 /* irrelevant */)
 
 /* Error dialog colors */
-#define ERROR_HOT_NORMAL   IF_COLOR (38, 0)
-#define ERROR_HOT_FOCUS    IF_COLOR (39, 0)
+#define ERROR_HOT_NORMAL   IF_COLOR (46, 0)
+#define ERROR_HOT_FOCUS    IF_COLOR (47, 0)
 
 #ifdef HAVE_SLANG
 #   define CTYPE const char *
@@ -91,6 +101,20 @@
 #   define CTYPE int
 #endif
 
+/* File Types for file highlighting */
+struct file_type_t {
+    /* A regular expression that matches the file type */
+    char *regex;
+    /* 1 if regex_buf contains the compiled regex, -1 if regex has an error */
+    int regex_compiled;
+    /* Compiled regular expression */
+    regex_t regex_buf;
+};
+
+#define NUM_FILE_TYPES 8
+
+extern struct file_type_t file_types [NUM_FILE_TYPES];
+
 void init_colors (void);
 void done_colors (void);
 void mc_init_pair (int index, CTYPE foreground, CTYPE background);
diff -ur mc-4.6.2-pre1.orig/src/layout.c mc-4.6.2-pre1/src/layout.c
--- mc-4.6.2-pre1.orig/src/layout.c	2008-07-22 23:02:03.000000000 +0400
+++ mc-4.6.2-pre1/src/layout.c	2008-07-22 23:00:53.000000000 +0400
@@ -131,6 +131,7 @@
 static int _free_space;
 static int _permission_mode;
 static int _filetype_mode;
+static int _colorize_hidden_mode;
 
 static int height;
 
@@ -138,7 +139,7 @@
 #define MINWIDTH 12
 #define MINHEIGHT 5
 
-#define BY      12
+#define BY      13
 
 #define B_2LEFT B_USER
 #define B_2RIGHT (B_USER + 1)
@@ -169,6 +170,7 @@
     { N_("&Equal split"),      &equal_split,     0 },
     { N_("pe&Rmissions"),      &permission_mode, 0 },
     { N_("&File types"),       &filetype_mode,   0 },
+    { N_("&Hidden files"),     &colorize_hidden_mode,0 },
     { 0, 0, 0 }
 };
 
@@ -302,6 +304,7 @@
 	return MSG_HANDLED;
 
     case DLG_POST_KEY:
+	_colorize_hidden_mode = check_options [9].widget->state & C_BOOL;
 	_filetype_mode = check_options [9].widget->state & C_BOOL;
 	_permission_mode = check_options [8].widget->state & C_BOOL;
 	_equal_split = check_options [7].widget->state & C_BOOL;
@@ -377,7 +380,7 @@
 		first_width = l1;
 	}
 
-	for (i = 0; i <= 9; i++) {
+	for (i = 0; i <= 10; i++) {
 	    check_options[i].text = _(check_options[i].text);
 	    l1 = mbstrlen (check_options[i].text) + 7;
 	    if (l1 > first_width)
@@ -428,14 +431,14 @@
     }
 
     layout_dlg =
-	create_dlg (0, 0, 15, first_width + second_width + 9,
+	create_dlg (0, 0, 16, first_width + second_width + 9,
 		    dialog_colors, layout_callback, "[Layout]",
 		    _("Layout"), DLG_CENTER | DLG_REVERSE);
 
     add_widget (layout_dlg, groupbox_new (4, 2, first_width, 6, title1));
-    add_widget (layout_dlg, groupbox_new (4, 8, first_width, 4, title2));
+    add_widget (layout_dlg, groupbox_new (4, 8, first_width, 5, title2));
     add_widget (layout_dlg,
-		groupbox_new (5 + first_width, 2, second_width, 10,
+		groupbox_new (5 + first_width, 2, second_width, 11,
 			      title3));
 
     add_widget (layout_dlg,
@@ -462,11 +465,14 @@
 	    check_new (9 - i, 7 + first_width, XTRACT (i));
 	add_widget (layout_dlg, check_options[i].widget);
     }
+    check_options[10].widget = check_new (11, 6, XTRACT (10));
+    add_widget (layout_dlg, check_options[10].widget);
     check_options[9].widget = check_new (10, 6, XTRACT (9));
     add_widget (layout_dlg, check_options[9].widget);
     check_options[8].widget = check_new (9, 6, XTRACT (8));
     add_widget (layout_dlg, check_options[8].widget);
 
+    _colorize_hidden_mode = colorize_hidden_mode;
     _filetype_mode = filetype_mode;
     _permission_mode = permission_mode;
     _equal_split = equal_split;
diff -ur mc-4.6.2-pre1.orig/src/main.c mc-4.6.2-pre1/src/main.c
--- mc-4.6.2-pre1.orig/src/main.c	2008-07-22 23:02:03.000000000 +0400
+++ mc-4.6.2-pre1/src/main.c	2008-07-23 00:22:12.000000000 +0400
@@ -970,6 +970,7 @@
     {' ', N_("c&Onfirmation..."), 'O', confirm_box},
     {' ', N_("&Display bits..."), 'D', display_bits_box},
     {' ', N_("learn &Keys..."), 'K', learn_keys},
+    {' ', N_("file &Highlighting..."),'H', file_highlighting_box},
 #ifdef USE_VFS
     {' ', N_("&Virtual FS..."), 'V', configure_vfs},
 #endif				/* !USE_VFS */
@@ -1470,6 +1471,8 @@
 static void
 done_mc (void)
 {
+    int i;
+
     disable_mouse ();
 
     done_menu ();
@@ -1485,6 +1488,10 @@
 	save_hotlist ();
     done_screen ();
     vfs_add_current_stamps ();
+
+    /* Free file highlighting variables */
+    for (i = 0; i < NUM_FILE_TYPES; i++)
+        g_free (file_types [i].regex);
 }
 
 /* This should be called after destroy_dlg since panel widgets
@@ -1954,7 +1961,9 @@
 	    "   Menus:        menu, menuhot, menusel, menuhotsel\n"
 	    "   Editor:       editnormal, editbold, editmarked\n"
 	    "   Help:         helpnormal, helpitalic, helpbold, helplink, helpslink\n"
-	    "   File types:   directory, executable, link, stalelink, device, special, core\n"
+	    "   File types:   directory, executable, link, stalelink, device, special,\n"
+	    "                 core, hidden, temp, doc, archive, source, media, graph,\n"
+	    "                 database\n"
 	    "\n" "Colors:\n"
 	    "   black, gray, red, brightred, green, brightgreen, brown,\n"
 	    "   yellow, blue, brightblue, magenta, brightmagenta, cyan,\n"
diff -ur mc-4.6.2-pre1.orig/src/panel.h mc-4.6.2-pre1/src/panel.h
--- mc-4.6.2-pre1.orig/src/panel.h	2008-07-22 23:02:03.000000000 +0400
+++ mc-4.6.2-pre1/src/panel.h	2008-07-22 23:00:53.000000000 +0400
@@ -79,6 +79,7 @@
 extern int torben_fj_mode;
 extern int permission_mode;
 extern int filetype_mode;
+extern int colorize_hidden_mode;
 extern int show_mini_info;
 extern int panel_scroll_pages;
 extern int fast_reload;
diff -ur mc-4.6.2-pre1.orig/src/screen.c mc-4.6.2-pre1/src/screen.c
--- mc-4.6.2-pre1.orig/src/screen.c	2008-07-22 23:02:03.000000000 +0400
+++ mc-4.6.2-pre1/src/screen.c	2008-07-23 01:23:53.000000000 +0400
@@ -103,9 +103,15 @@
 /* If 1 - then add per file type hilighting */
 int filetype_mode = 1;
 
+/* If 1 - then hidden files will be highlighted as normal files */
+int colorize_hidden_mode = 0;
+
 /* The hook list for the select file function */
 Hook *select_file_hook = 0;
 
+/* File Types for file highlighting */
+struct file_type_t file_types [NUM_FILE_TYPES];
+
 static cb_ret_t panel_callback (Widget *, widget_msg_t msg, int parm);
 static int panel_event (Gpm_Event *event, void *);
 static void paint_frame (WPanel *panel);
@@ -485,57 +491,115 @@
 { "dot",   1,  0, J_RIGHT,	" ",		0, string_dot,		   NULL },
 };
 
+int
+file_entry_color (file_entry *fe)
+{
+    if (filetype_mode)
+    {
+        /* if filetype_mode == true  */
+        if (fe->fname[0]=='.' && strcmp(fe->fname, "..") && colorize_hidden_mode==0)
+            return (HIDDEN_COLOR);
+        else if (S_ISDIR (fe->st.st_mode))
+            return (DIRECTORY_COLOR);
+        else if (S_ISLNK (fe->st.st_mode)) {
+            if (fe->f.link_to_dir)
+                return (DIRECTORY_COLOR);
+            else if (fe->f.stale_link)
+                return (STALE_LINK_COLOR);
+            else
+                return (LINK_COLOR);
+        } else if (S_ISSOCK (fe->st.st_mode))
+            return (SPECIAL_COLOR);
+        else if (S_ISCHR (fe->st.st_mode))
+            return (DEVICE_COLOR);
+        else if (S_ISBLK (fe->st.st_mode))
+            return (DEVICE_COLOR);
+        else if (S_ISNAM (fe->st.st_mode))
+            return (DEVICE_COLOR);
+        else if (S_ISFIFO (fe->st.st_mode))
+            return (SPECIAL_COLOR);
+        else if (S_ISDOOR (fe->st.st_mode))
+            return (SPECIAL_COLOR);
+        else if (!S_ISREG (fe->st.st_mode))
+            return (STALE_LINK_COLOR);	/* non-regular file of unknown kind */
+        else if (is_exe (fe->st.st_mode))
+            return (EXECUTABLE_COLOR);
+        else
+        {
+            int i, err, color = NORMAL_COLOR;
+
+            if (fe->fname)
+                /* set file color depending on mask */
+                for (i = 0; i < NUM_FILE_TYPES; i++) {
+                    if (!file_types [i].regex_compiled) {
+                        if (!file_types [i].regex || !*file_types [i].regex)
+                            continue;
+
+                        /* try to compile the regular expression */
+                        gchar *rex = convert_pattern (file_types [i].regex, match_file, 0);
+                        err = regcomp (&file_types [i].regex_buf, rex, REG_EXTENDED|REG_NOSUB|MC_ARCH_FLAGS);
+                        g_free (rex);
+
+                        if (err) {
+                            static const char *last_warning = NULL;
+                            if (last_warning != file_types [i].regex) {
+                                last_warning = file_types [i].regex;
+                                message (1, MSG_ERROR, _("Invalid file coloring pattern `%s'\n"),
+                                    file_types [i].regex);
+                            }
+                            file_types [i].regex_compiled = -1;
+                            continue;
+                        }
+                        file_types [i].regex_compiled = 1;
+                    }
+
+                    if (file_types [i].regex_compiled < 0)
+                        continue;
+
+                    if (regexec (&file_types [i].regex_buf, fe->fname, 0, NULL, 0))
+                        continue;
+
+                    color = FILE_TYPE_COLOR_1st + i;
+                    break;
+                }
+
+            return color;
+        }
+    } else {
+        /* if filetype_mode == false  */
+        if (fe->fname[0]=='.' && strcmp(fe->fname, "..") && colorize_hidden_mode==1)
+            return (HIDDEN_COLOR);
+        else
+            return (NORMAL_COLOR);
+    }
+}
+
 static int
 file_compute_color (int attr, file_entry *fe)
 {
+    int color;
+
     switch (attr) {
     case SELECTED:
-	return (SELECTED_COLOR);
+        color = SELECTED_COLOR;
+        break;
     case MARKED:
-	return (MARKED_COLOR);
+        color = MARKED_COLOR;
+        break;
     case MARKED_SELECTED:
-	return (MARKED_SELECTED_COLOR);
+        color = MARKED_SELECTED_COLOR;
+        break;
     case STATUS:
-	return (NORMAL_COLOR);
+        color = NORMAL_COLOR;
+        break;
     case NORMAL:
     default:
-	if (!filetype_mode)
-	    return (NORMAL_COLOR);
+        color = file_entry_color(fe);
     }
 
-    /* if filetype_mode == true  */
-    if (S_ISDIR (fe->st.st_mode))
-	return (DIRECTORY_COLOR);
-    else if (S_ISLNK (fe->st.st_mode)) {
-	if (fe->f.link_to_dir)
-	    return (DIRECTORY_COLOR);
-	else if (fe->f.stale_link)
-	    return (STALE_LINK_COLOR);
-	else
-	    return (LINK_COLOR);
-    } else if (S_ISSOCK (fe->st.st_mode))
-	return (SPECIAL_COLOR);
-    else if (S_ISCHR (fe->st.st_mode))
-	return (DEVICE_COLOR);
-    else if (S_ISBLK (fe->st.st_mode))
-	return (DEVICE_COLOR);
-    else if (S_ISNAM (fe->st.st_mode))
-	return (DEVICE_COLOR);
-    else if (S_ISFIFO (fe->st.st_mode))
-	return (SPECIAL_COLOR);
-    else if (S_ISDOOR (fe->st.st_mode))
-	return (SPECIAL_COLOR);
-    else if (!S_ISREG (fe->st.st_mode))
-	return (STALE_LINK_COLOR);	/* non-regular file of unknown kind */
-    else if (is_exe (fe->st.st_mode))
-	return (EXECUTABLE_COLOR);
-    else if (fe->fname && (!strcmp (fe->fname, "core")
-			   || !strcmp (extension (fe->fname), "core")))
-	return (CORE_COLOR);
-
-    return (NORMAL_COLOR);
+    return color;
 }
-
+     
 /* Formats the file number file_index of panel in the buffer dest */
 static void
 format_file (WPanel *panel, int file_index, int width, int attr, int isstatus)
diff -ur mc-4.6.2-pre1.orig/src/setup.c mc-4.6.2-pre1/src/setup.c
--- mc-4.6.2-pre1.orig/src/setup.c	2008-07-22 23:02:03.000000000 +0400
+++ mc-4.6.2-pre1/src/setup.c	2008-07-23 01:43:28.000000000 +0400
@@ -41,6 +41,7 @@
 #include "win.h"		/* lookup_key */
 #include "cmd.h"
 #include "file.h"		/* safe_delete */
+#include "color.h"		/* safe_delete */
 
 #ifdef USE_VFS
 #include "../vfs/gc.h"
@@ -135,6 +136,7 @@
     { "permission_mode", &permission_mode },
     { "filetype_mode", &filetype_mode },
     { "free_space", &free_space },
+    { "colorize_hidden_mode", &colorize_hidden_mode },
     { 0, 0 }
 };
 
@@ -235,6 +237,21 @@
     { NULL, NULL }
 };
 
+static const char *file_type_names [NUM_FILE_TYPES] = {
+    "core", "temp", "doc", "archive", "source", "media", "graphics", "database"
+};
+
+static const char *file_type_regex [NUM_FILE_TYPES] = {
+    "(|*.)core(|.*)",   /* program.core, core, core.1234 */
+    "(stamp-*|*~|*.(tmp|$$$|bak))",
+    "(*.(txt|doc|rtf|diz|ctl|me|ps|pdf|xml|xsd|xslt|dtd|html|shtml|htm|mail|msg|lsm|po|nroff|man|tex|sgml|css|text|letter|changes|dsc|log)|README*|NEWS*|INSTALL*|FAQ*|COPYING*|TODO*|AUTHORS*|ABOUT-NLS*|HACKING*|MAINTAINERS*|ChangeLog*)",
+    "*.(gz|bz2|tar|tgz|tbz|tbz2|Z|rar|zip|arj|cab|lzh|lha|zoo|arc|ark|rpm|deb|pkg)",
+    "(*.(c|h|cc|hh|cpp|hpp|asm|py|pl|pm|inc|cgi|php|phps|js|java|jav|jasm|sh|bash|diff|patch|pas|tcl|tk|awk|m4|st|mak|sl|ada|caml|ml|mli|mly|mll|mlp|sas|prg|ac|in|mak|smak|syntax)|(GNUm|M)akefile*)",
+    "*.(mp2|mp3|ogg|mpeg|wav|wma|mpg|mpeg|avi|asf|mov|mkv|mol|mpl|xm|mod|it|med|mid|midi|s3m|umx)",
+    "*.(jpg|jpeg|gif|png|tif|tiff|pcx|bmp|xpm|xbm|eps|pic|rle|ico|wmf|omf|ai|cdr|lbm)",
+    "*.(dbf|mdn|db|mdb|dat|fox|dbx|mdx|sql|mssql|msql|ssql|pgsql|xls|cdx|dbi|frm|MYD|MYI)"
+};
+
 void
 panel_save_setup (struct WPanel *panel, const char *section)
 {
@@ -342,6 +359,7 @@
 save_setup (void)
 {
     char *profile;
+    int i;
 
     saving_setup = 1;
     profile = concat_dir_and_file (home_dir, PROFILE_NAME);
@@ -369,6 +387,10 @@
 				   ftpfs_proxy_host, profile);
 #endif /* USE_VFS && USE_NETCODE */
 
+    /* Save file highlighting info */
+    for (i = 0; i < NUM_FILE_TYPES; i++)
+        save_string ("File Types", file_type_names [i], file_types [i].regex, profile_name);
+
 #ifdef HAVE_CHARSET
     save_string( "Misc", "display_codepage",
     		 get_codepage_id( display_codepage ), profile_name );
@@ -458,10 +480,10 @@
 static char *
 do_load_string (const char *s, const char *ss, const char *def)
 {
-    char *buffer = g_malloc (BUF_SMALL);
+    char *buffer = g_malloc (BUF_MEDIUM);
     char *p;
 
-    load_string (s, ss, def, buffer, BUF_SMALL);
+    load_string (s, ss, def, buffer, BUF_MEDIUM);
 
     p = g_strdup (buffer);
     g_free (buffer);
@@ -570,6 +592,15 @@
     load_string ("Colors", "color_terminals", "",
 			     color_terminal_string, sizeof (color_terminal_string));
 
+    /* Load file highlighting info */
+    for (i = 0; i < NUM_FILE_TYPES; i++) {
+        file_types [i].regex = do_load_string ("File Types",
+            file_type_names [i], file_type_regex [i]);
+        if (file_types [i].regex_compiled > 0)
+            regfree (&file_types [i].regex_buf);
+        file_types [i].regex_compiled = 0;
+    }
+
     /* Load the directory history */
 /*    directory_history_load (); */
     /* Remove the temporal entries */
