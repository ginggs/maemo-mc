This patch makes VFS a bit faster by replacing GSList with GPtrArray
and using a clever trick to avoid doing list/array searches on every
VFS lookup.

Andrew Zabolotny <zap@homelink.ru>
diff -ur mc-4.6.2-pre1.orig/vfs/fish.c mc-4.6.2-pre1/vfs/fish.c
--- mc-4.6.2-pre1.orig/vfs/fish.c	2007-08-23 17:16:40.000000000 +0400
+++ mc-4.6.2-pre1/vfs/fish.c	2008-07-23 02:45:25.000000000 +0400
@@ -635,7 +635,7 @@
 #if defined(_FILE_OFFSET_BITS) && _FILE_OFFSET_BITS == 64 || (defined _LARGE_FILES && _LARGE_FILES)
     if (sscanf( reply_str, "%llu", &fh->u.fish.total )!=1)
 #else
-    if (sscanf( reply_str, "%u", &fh->u.fish.total )!=1)
+    if (sscanf( reply_str, "%lu", &fh->u.fish.total )!=1)
 #endif
 	ERRNOR (E_REMOTE, 0);
     return 1;
diff -ur mc-4.6.2-pre1.orig/vfs/vfs.c mc-4.6.2-pre1/vfs/vfs.c
--- mc-4.6.2-pre1.orig/vfs/vfs.c	2005-07-06 01:01:57.000000000 +0400
+++ mc-4.6.2-pre1/vfs/vfs.c	2008-07-23 02:51:48.000000000 +0400
@@ -63,7 +63,8 @@
     void *fsinfo;
 };
 
-static GSList *vfs_openfiles;
+static GPtrArray *vfs_openfiles;
+static long vfs_free_handle_list = -1;
 #define VFS_FIRST_HANDLE 100
 
 static struct vfs_class *localfs_class;
@@ -72,40 +73,44 @@
 static int
 vfs_new_handle (struct vfs_class *vclass, void *fsinfo)
 {
-    static int vfs_handle_counter = VFS_FIRST_HANDLE;
     struct vfs_openfile *h;
 
     h = g_new (struct vfs_openfile, 1);
-    h->handle = vfs_handle_counter++;
     h->fsinfo = fsinfo;
     h->vclass = vclass;
-    vfs_openfiles = g_slist_prepend (vfs_openfiles, h);
-    return h->handle;
-}
 
-/* Function to match handle, passed to g_slist_find_custom() */
-static gint
-vfs_cmp_handle (gconstpointer a, gconstpointer b)
-{
-    if (!a)
-	return 1;
-    return ((struct vfs_openfile *) a)->handle != (long) b;
+    /* Allocate the first free handle */
+    h->handle = vfs_free_handle_list;
+    if (h->handle == -1) {
+        /* No free allocated handles, allocate one */
+        h->handle = vfs_openfiles->len;
+        g_ptr_array_add (vfs_openfiles, h);
+    } else {
+        vfs_free_handle_list = (long)g_ptr_array_index (vfs_openfiles, vfs_free_handle_list);
+        g_ptr_array_index (vfs_openfiles, h->handle) = h;
+    }
+
+    h->handle += VFS_FIRST_HANDLE;
+    return h->handle;
 }
 
 /* Find VFS class by file handle */
 static inline struct vfs_class *
 vfs_op (int handle)
 {
-    GSList *l;
     struct vfs_openfile *h;
 
-    l = g_slist_find_custom (vfs_openfiles, (void *) (long) handle,
-			     vfs_cmp_handle);
-    if (!l)
-	return NULL;
-    h = (struct vfs_openfile *) l->data;
+    if (handle < VFS_FIRST_HANDLE ||
+        handle - VFS_FIRST_HANDLE >= vfs_openfiles->len)
+        return NULL;
+
+    h = (struct vfs_openfile *) g_ptr_array_index (
+        vfs_openfiles, handle - VFS_FIRST_HANDLE);
     if (!h)
-	return NULL;
+        return NULL;
+
+    g_assert (h->handle == handle);
+
     return h->vclass;
 }
 
@@ -113,16 +118,19 @@
 static inline void *
 vfs_info (int handle)
 {
-    GSList *l;
     struct vfs_openfile *h;
 
-    l = g_slist_find_custom (vfs_openfiles, (void *) (long) handle,
-			     vfs_cmp_handle);
-    if (!l)
-	return NULL;
-    h = (struct vfs_openfile *) l->data;
+    if (handle < VFS_FIRST_HANDLE ||
+        handle - VFS_FIRST_HANDLE >= vfs_openfiles->len)
+        return NULL;
+
+    h = (struct vfs_openfile *) g_ptr_array_index (
+        vfs_openfiles, handle - VFS_FIRST_HANDLE);
     if (!h)
-	return NULL;
+        return NULL;
+
+    g_assert (h->handle == handle);
+
     return h->fsinfo;
 }
 
@@ -130,11 +138,13 @@
 static inline void
 vfs_free_handle (int handle)
 {
-    GSList *l;
-
-    l = g_slist_find_custom (vfs_openfiles, (void *) (long) handle,
-			     vfs_cmp_handle);
-    vfs_openfiles = g_slist_delete_link (vfs_openfiles, l);
+    if (handle < VFS_FIRST_HANDLE ||
+        handle - VFS_FIRST_HANDLE >= vfs_openfiles->len)
+        return;
+
+    g_ptr_array_index (vfs_openfiles, handle - VFS_FIRST_HANDLE) =
+        (void *)vfs_free_handle_list;
+    vfs_free_handle_list = handle - VFS_FIRST_HANDLE;
 }
 
 static struct vfs_class *vfs_list;
@@ -867,6 +877,9 @@
 void
 vfs_init (void)
 {
+    /* create the VFS handle array */
+    vfs_openfiles = g_ptr_array_new ();
+
     /* localfs needs to be the first one */
     init_localfs();
     /* fallback value for vfs_get_class() */
@@ -909,7 +922,7 @@
 	if (vfs->done)
 	    (*vfs->done) (vfs);
 
-    g_slist_free (vfs_openfiles);
+    g_ptr_array_free (vfs_openfiles, TRUE);
 }
 
 /*
